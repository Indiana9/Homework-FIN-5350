{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## First import numpy\n",
    "import numpy as np\n",
    "from scipy.stats import binom\n",
    "\n",
    "## Call Payoff Function\n",
    "def callPayoff(spot, strike):\n",
    "    return np.maximum(spot - strike, 0.0)\n",
    "\n",
    "## Put Payoff Function\n",
    "def putPayoff(spot, strike):\n",
    "    return np.maximum(strike - spot, 0.0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Problem #1\n",
    "\n",
    "Find the delta, beta and Premium for a European Call and Put Option.\n",
    "\n",
    "S = 100 , K = 105 , r = 8% , T = 0.5 , u = 1.3 , d = 0.8 , D = 0 , n = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The European Call Delta:  0.500 and the Put Delta is -0.500\n",
      "The European Call Beta: -38.432 and the Put Beta is  62.451\n",
      "The European Call Premium:  11.568 and the Put Premium is  12.451\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "\n",
    "S= 100\n",
    "K = 105\n",
    "r = 0.08\n",
    "T = 0.5\n",
    "u = 1.3\n",
    "d = 0.8\n",
    "D = 0.0\n",
    "n = 1\n",
    "\n",
    "\n",
    "h = T/n\n",
    "cuc = np.maximum((S * u) - K, 0)\n",
    "cdc = np.maximum((S * d) - K, 0)\n",
    "deltacall = math.exp(-D * h) * ((cuc-cdc)/(S * (u-d)))\n",
    "borrowingcall = math.exp(-r * h) * (((u*cdc)-(d * cuc))/(u-d))\n",
    "Premiumcall = (deltacall * S) + borrowingcall\n",
    "\n",
    "cup = np.maximum(K - (S * u), 0)\n",
    "cdp = np.maximum(K - (S * d), 0)\n",
    "\n",
    "deltaput = math.exp(-D * h) * ((cup-cdp)/(S * (u-d)))\n",
    "borrowingput = math.exp(-r * h) * (((u*cdp)-(d * cup))/(u-d))\n",
    "Premiumput = (deltaput * S) + borrowingput\n",
    "\n",
    "print(f\"The European Call Delta: {deltacall : 0.3f} and the Put Delta is {deltaput : 0.3f}\")\n",
    "print(f\"The European Call Beta: {borrowingcall : 0.3f} and the Put Beta is {borrowingput : 0.3f}\")\n",
    "print(f\"The European Call Premium: {Premiumcall : 0.3f} and the Put Premium is {Premiumput : 0.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Problem #2\n",
    "\n",
    "S = 100, k = 95 , r = 8% , T = .5 , D = 0 , u = 1.3 , d = 0.8 , n = 1\n",
    "\n",
    "Verify the price of a European Put Option of $7.741. \n",
    "You observe a call price of $17, what is the arbitrage?\n",
    "You observe a call price of $15.50, what is the arbitrage?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The European Call Premium:  16.196 and the Put Premium is  7.471\n"
     ]
    }
   ],
   "source": [
    "S= 100\n",
    "K = 95\n",
    "r = 0.08\n",
    "T = 0.5\n",
    "u = 1.3\n",
    "d = 0.8\n",
    "D = 0.0\n",
    "n = 1\n",
    "\n",
    "\n",
    "h = T/n\n",
    "cuc = np.maximum((S * u) - K, 0)\n",
    "cdc = np.maximum((S * d) - K, 0)\n",
    "deltacall = math.exp(-D * h) * ((cuc-cdc)/(S * (u-d)))\n",
    "borrowingcall = math.exp(-r * h) * (((u*cdc)-(d * cuc))/(u-d))\n",
    "Premiumcall = (deltacall * S) + borrowingcall\n",
    "\n",
    "cup = np.maximum(K - (S * u), 0)\n",
    "cdp = np.maximum(K - (S * d), 0)\n",
    "\n",
    "deltaput = math.exp(-D * h) * ((cup-cdp)/(S * (u-d)))\n",
    "borrowingput = math.exp(-r * h) * (((u*cdp)-(d * cup))/(u-d))\n",
    "Premiumput = (deltaput * S) + borrowingput\n",
    "\n",
    "print(f\"The European Call Premium: {Premiumcall : 0.3f} and the Put Premium is {Premiumput : 0.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A price of 17 dollars would be best to short the call and make a profit of 81 cents while a price of 15.50 would be best to long the call and make a profit of 69 cents"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Problem #3\n",
    "\n",
    "S = 100, k = 95, v = .3, r = 8%, T = 1. D = 0.0, u = 1.3, d = .8, n = 2\n",
    "\n",
    "Construct a binomial tree for a call option. Place delta, beta and the premium at each node. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The European Call Premium at CU:  36.881 and the delta is  1.000 and the beta is -93.1\n"
     ]
    }
   ],
   "source": [
    "S= 130\n",
    "K = 95\n",
    "r = 0.08\n",
    "T = 0.5\n",
    "u = 1.3\n",
    "d = 0.8\n",
    "D = 0.0\n",
    "n = 2\n",
    "\n",
    "\n",
    "h = T/n\n",
    "cuuc = np.maximum(74, 0)\n",
    "cudc = np.maximum(9, 0)\n",
    "deltacall1 = math.exp(-D * h) * ((cuuc-cudc)/(S * (u-d)))\n",
    "borrowingcall1 = math.exp(-r * h) * (((u*cudc)-(d * cuuc))/(u-d))\n",
    "Premiumcall1 = (deltacall1 * S) + borrowingcall1\n",
    "\n",
    "print(f\"The European Call Premium at CU: {Premiumcall1 : 0.3f} and the delta is {deltacall1 : 0.3f} and the beta is {borrowingcall1 : 0.3}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The European Call Premium at Cd: -13.119 and the delta is  0.225 and the beta is -14.1\n"
     ]
    }
   ],
   "source": [
    "S= 80\n",
    "K = 95\n",
    "r = 0.08\n",
    "T = 0.5\n",
    "u = 1.3\n",
    "d = 0.8\n",
    "D = 0.0\n",
    "n = 2\n",
    "\n",
    "\n",
    "h = T/n\n",
    "cddc = np.maximum(0, 0)\n",
    "cudc = np.maximum(9, 0)\n",
    "deltacall2 = math.exp(-D * h) * ((cudc-cddc)/(S * (u-d)))\n",
    "borrowingcall2 = math.exp(-r * h) * (((u*cddc)-(d * cudc))/(u-d))\n",
    "Premiumcall2 = (deltacall1 * S) + borrowingcall1\n",
    "\n",
    "print(f\"The European Call Premium at Cd: {Premiumcall2 : 0.3f} and the delta is {deltacall2 : 0.3f} and the beta is {borrowingcall2 : 0.3}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
